// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
}

model Provincia {
  id          String        @id @default(cuid())
  nome        String        @unique
  codico      String        @unique
  Cooperativa Cooperativa[]

  @@map("Provincias")
}

enum Cargo {
  Recepcionista
  Gerente
  Limpeza
}

enum Status {
  Andamento
  Finalizada
  NFinalizada
}

model Cooperativa {
  id          String   @id @default(cuid())
  nome        String   @unique
  endereco    String   @unique
  contacto    String   @unique
  email       String   @unique
  senha       String
  provinciaId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  provincia_id Provincia     @relation(fields: [provinciaId], references: [id])
  Veiculo      Veiculo[]
  Cliente      Cliente[]
  Motorista    Motorista[]
  funcionarios Funcionario[]

  @@map("Cooperativas")
}

model Veiculo {
  id             String      @id @default(cuid())
  modelo         String
  matricula      String      @unique
  cooperativaId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Cooperativa_id Cooperativa @relation(fields: [cooperativaId], references: [id])
  Motorista      Motorista[]

  @@map("Veiculos")
}

model Motorista {
  id             String      @id @default(cuid())
  nome           String
  numeroBI       String      @unique
  nascimento     DateTime
  cooperativaId  String
  veiculoId      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Cooperativa_id Cooperativa @relation(fields: [cooperativaId], references: [id])
  veiculo_id     Veiculo     @relation(fields: [veiculoId], references: [id])
  recolha        recolha[]

  @@map("Motoristas")
}

model Funcionario {
  id            String      @id @default(cuid())
  nome          String
  numeroBI      String      @unique
  cargo         Cargo
  nascimento    DateTime
  cooperativaId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Coperativa_id Cooperativa @relation(fields: [cooperativaId], references: [id])
  contactoF     contactoF[]

  @@map("Funcionarios")
}

model Cliente {
  id             String      @id @default(cuid())
  nome           String
  numeroBI       String      @unique
  endereco       String
  coordenadas    String      @unique
  cooperativaId  String
  nascimento     DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  Cooperativa_id Cooperativa @relation(fields: [cooperativaId], references: [id])
  contactoC      contactoC[]
  recolha        recolha[]

  @@map("Clientes")
}

model contactoC {
  id         String   @id @default(cuid())
  telefone   String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cliente_id Cliente  @relation(fields: [clienteId], references: [id])
  clienteId  String

  @@map("contacto cliente")
}

model contactoF {
  id             String      @id @default(cuid())
  telefone       String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  funcionario_id Funcionario @relation(fields: [funcionarioId], references: [id])
  funcionarioId  String

  @@map("contacto funcionario")
}

model recolha {
  id     String @id @default(cuid())
  nome   String @unique
  status Status

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cliente_id   Cliente   @relation(fields: [clienteId], references: [id])
  motorista_id Motorista @relation(fields: [motoristaId], references: [id])
  clienteId    String
  motoristaId  String
}
